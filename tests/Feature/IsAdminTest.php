<?php

namespace Mvd81\LaravelIsAdmin\Test;

use Mvd81\LaravelIsAdmin\Test\Models\User;

class IsAdminTest extends TestCase
{
    public $userOne;
    public $nonAdminUser;
    public $adminUser;

   public function setUp(): void {
       parent::setUp(); // TODO: Change the autogenerated stub

       $this->userOne = User::create([
           'name' => 'Normal user',
           'email' => 'user_one@testpackage.test',
           'password' => bcrypt('testing'),
       ]);

       $this->nonAdminUser = User::create([
           'name' => 'Normal user',
           'email' => 'normal_user@testpackage.test',
           'password' => bcrypt('testing'),
       ]);

       $this->adminUser = User::create([
           'name' => 'Admin user',
           'email' => 'admin_user@testpackage.test',
           'password' => bcrypt('testing'),
           'is_admin' => 1
       ]);
   }

    /**
    * @test
    */
   public function expect_after_a_user_is_created_without_the_is_admin_column_the_user_is_not_an_admin() {

       $this->assertDatabaseHas('users', [
           'id' => $this->nonAdminUser->id,
           'is_admin' => 0
       ]);
   }

    /**
     * @test
     */
    public function expect_if_we_create_a_user_with_the_is_admin_column_and_is_1_the_user_is_an_admin() {

        $this->assertDatabaseHas('users', [
            'id' => $this->adminUser->id,
            'is_admin' => 1
        ]);
    }

    /**
     * @test
     */
    public function expect_to_see_i_am_an_admin_only_for_admin_in_view_blade_templates_with_using_is_admin_blade_directive() {

        $this->get('blade')
            ->assertStatus(200)
            ->assertSee('Dummy page')
            ->assertDontSee('I am an admin');

        $this->be($this->nonAdminUser)
            ->get('blade')
            ->assertStatus(200)
            ->assertSee('Dummy page')
            ->assertDontSee('I am an admin');

        $this->be($this->adminUser)
           ->get('blade')
           ->assertStatus(200)
           ->assertSee('Dummy page')
           ->assertSee('I am an admin');
    }

    /**
     * @test
     */
    public function expect_only_a_status_200_for_admins_with_is_admin_middleware() {

        $this->get('admin-route')
            ->assertSee('login');

        $this->be($this->nonAdminUser)
            ->get('admin-route')
            ->assertStatus(403);

        $this->be($this->adminUser)
            ->get('admin-route')
            ->assertStatus(200);
    }

    /**
     * @test
     */
    public function expect_user_one_is_an_admin_if_config_use_super_admin_is_true() {

        config(['is_admin.use_super_admin' => true]);

        $this->be($this->userOne)
            ->get('admin-route')
            ->assertStatus(200)
            ->assertSee('admin page');
    }

    /**
     * @test
     */
    public function expect_user_one_is_not_an_admin_if_config_use_super_admin_is_false() {

        config(['is_admin.use_super_admin' => false]);

        $this->be($this->userOne)
            ->get('admin-route')
            ->assertStatus(403);
    }

    /**
     * @test
     */
    public function expect_to_make_a_normal_user_as_admin() {

        $this->nonAdminUser->makeAdmin();
        $this->assertDatabaseHas('users', [
            'id' => $this->nonAdminUser->id,
            'is_admin' => 1
        ]);
    }

    /**
     * @test
     */
    public function expect_to_convert_an_admin_to_a_normal_user() {

        $this->adminUser->undoAdmin();
        $this->assertDatabaseHas('users', [
            'id' => $this->adminUser->id,
            'is_admin' => 0
        ]);
    }
}
